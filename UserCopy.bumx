machine UserCopy
sees UserContextCopy

variables
	accounts
	registered
	logged_in

	roles
	admins
	staff
	clients
invariants
      

	/* REQ 1: The system manages a set of registered users. */
	@typeof-registered: registered ⊆ USER
      
    // Every registered user must have exactly one password.
    // The same password (or hash) can belong to one or many registered users.
    // (1..*) -> (1) but for some reason no work
	@typeof-account: accounts ∈ registered → PASSWORD
    
	/* REQ 4: There are three types of users: administrators, staff, and clients */
	/* REQ 5: A registered user can only have one role in the system */
	@typeof-user-roles: roles ∈ registered → ROLE
	
	/* Logged in users is a subset of registered users */
	@typeof-logged_in: logged_in ⊆ registered
	
event INITIALISATION
	then
		@act-init-admins: admins ≔ {root_user}
		@act-init-staff: staff ≔ ∅
		@act-init-clients: clients ≔ ∅
//		@act-init-accounts: accounts(root_user) ≔ root_password
		@act-init-accounts: accounts ≔ {root_user ↦ root_password}
		@act-init-registered: registered ≔ {root_user}
		@act-init-logged_in: logged_in ≔ ∅
	end
	
	/* REQ 2: The system should only allow a user to log in to the system using the correct password. */
	event LoginUser
	any
		user
		pass 
	where
		@check-registered: user ∈ registered
		@check-password: accounts(user)= pass
		@check-not-logged-in: user ∉ logged_in
	then
		@add-logged-in: logged_in ≔ logged_in ∪ {user}
	end
	
	/* REQ 3: A logged-in user can log out of the system. */
	event LogoutUser
	any
		user
		pass
	where
		@check-loggedin: user ∈ logged_in
		@check-password: pass = accounts(user)
	then
		@remove-logged-in: logged_in ≔ logged_in ∖ {user}
	end
	
	/* REQ 9: A logged-in user can change their password. */
	event ChangeUserPassword
		any
			user
			new_pass
		where
			@user-logged-in: user ∈ logged_in
			@new-pass: new_pass ∈ PASSWORD
			@password-is-different: accounts(user) ≠ new_pass
		then
			@set-password: accounts(user) ≔ new_pass
	end
	
	/* REQ 8: A client can registered an account with the system directly. */
	event registerClient
		any
			user
			pass
		where
			@user: user ∈ USER
			@pass: pass ∈ PASSWORD
			@check-unregistered: user ∉ registered
		then
			@add-user: registered ≔ registered ∪ {user}
			@add-client: clients ≔ clients ∪ {user}
			@set-password: accounts(user) ≔ pass
	end
	
	/* REQ 7: A logged-in administrator can registered a new user for the role of administrator or staff. */
	event RegisterAdmin
		any 
			admin
			user
			user_role
			pass
		where
			@admin-logged-in: admin ∈ admins ∩ logged_in
			@user: user ∈ USER // USER and not users
			@not-registered: user ∉ registered 
			@pass: pass ∈ PASSWORD
		then
			@add-user: registered ≔ registered ∪ {user}
			@add-admin: admins ≔ admins ∪ {user}
			@set-password: accounts(user) ≔ pass
	end
		
	/* REQ 7: A logged-in administrator can registered a new user for the role of administrator or staff. */
	event RegisterStaff
		any 
			admin
			user
			pass
		where
			@admin-logged-in: admin ∈ admins ∩ logged_in
			@user: user ∈ USER // USER and not users
			@not-registered: user ∉ registered
			@pass: pass ∈ PASSWORD
		then
			@add-user: registered ≔ registered ∪ {user}
			@add-staff: staff ≔ staff ∪ {user}
			@set-password: accounts(user) ≔ pass
	end
end	