machine UserCopy
sees UserContextCopy

variables
	accounts
	registered
	current_user
	relations
invariants
      
	/* REQ 1: The system manages a set of registered users. */
	@typeof-registered: registered ⊆ USER
      
    // Every registered user must have exactly one password.
    // The same password (or hash) can belong to one or many registered users.
    // (1..*) -> (1) but for some reason no work
	@typeof-account: accounts ∈ registered → PASSWORD
    
	/* REQ 4: There are three types of users: administrators, staff, and clients */
	/* REQ 5: A registered user can only have one role in the system */
	@type-of-role: relations ∈ registered → ROLE
	
	/* Logged in users is a subset of registered users */
	@typeof-current-user: current_user ∈ registered
	
	
//	@type-of-admin:∀ c · c ∈ registered_users ∧ relations(c) = OPERATOR ⇒ relations(c) ≠ SUPERVISOR
//	@type-of-staff:∀ c · c ∈ registered_users ∧ relations(c) = OPERATOR ⇒ relations(c) ≠ SUPERVISOR
//	@type-of-client:∀ c · c ∈ registered_users ∧ relations(c) = OPERATOR ⇒ relations(c) ≠ SUPERVISOR
	

	event INITIALISATION
	then
		@act-init-accounts: accounts ≔ {root_user ↦ root_password}
		@act-init-registered: registered ≔ {root_user}
		@act-init-relations: relations ≔ {root_user ↦ Admin}
		@act-init-current-user: current_user :∈ ∅
	end
	
	/* REQ 2: The system should only allow a user to log in to the system using the correct password. */
	event LoginUser
	any
		user
		pass 
	where
		@check-registered: user ∈ registered
		@check-password: accounts(user)= pass
		@check-not-logged-in: current_user ∈ ∅
	then
		@login: current_user ≔ user
	end
	
	/* REQ 3: A logged-in user can log out of the system. */
	event LogoutUser
		any
			user
			pass
		where
			@check-logged-in: current_user ∉ ∅
			@check-password: pass = accounts(user)
		then
			@log-out: current_user :∈ ∅
	end
	
	/* REQ 9: A logged-in user can change their password. */
	event ChangeUserPassword
		any
			user
			new_pass
		where
			@check-logged-in: current_user ∉ ∅
			@new-pass: new_pass ∈ PASSWORD
			@password-is-different: accounts(user) ≠ new_pass
		then
			@set-password: accounts(user) ≔ new_pass
	end
	
	/* REQ 8: A client can registered an account with the system directly. */
	event registerClient
		any
			user
			pass
		where
			@user: user ∈ USER
			@pass: pass ∈ PASSWORD
			@check-unregistered: user ∉ registered
		then
			@add-user: registered ≔ registered ∪ {user}
			@assign-client: relations ≔ relations ∪ {user ↦ Client}
			@set-password: accounts(user) ≔ pass
	end
	
	/* REQ 7: A logged-in administrator can registered a new user for the role of administrator or staff. */
	event RegisterAdmin
		any 
			user
			pass
		where
			@admin-logged-in: current_user ↦ Admin ∈ relations ∪ {user ↦ Admin}
			@user: user ∈ USER
			@not-registered: user ∉ registered 
			@pass: pass ∈ PASSWORD
		then
			@add-user: registered ≔ registered ∪ {user}
			@assign-staff: relations ≔ relations ∪ {user ↦ Admin}
			@set-password: accounts(user) ≔ pass
	end
		
	/* REQ 7: A logged-in administrator can registered a new user for the role of administrator or staff. */
	event RegisterStaff
		any 
			user
			pass
		where
			@staff-logged-in: current_user ↦ Staff ∈ relations ∪ {user ↦ Staff}
			@user: user ∈ USER
			@not-registered: user ∉ registered
			@pass: pass ∈ PASSWORD
		then
			@add-user: registered ≔ registered ∪ {user}
			@assign-staff: relations ≔ relations ∪ {user ↦ Staff}
			@set-password: accounts(user) ≔ pass
	end	