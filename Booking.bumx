machine Booking
refines Pharmacy
sees BookingContext

variables
	password
	registered
	current_user
	role
	
	pharmacies
	medicine
	medicine_qty
	client_name
	nric
	prescriptions
//	medicine_info
//	last_medicine_date
	pharmacy_stock
	appointment_num
	pres
	
	
	appointment
	phars
	offer
	booked
	booking
	accepted_booked
//	client_ic
	available_appointment 
	booked_appointment
	accepted_appointment 
	rejected_appointment  
	
//	client_appointment
//	pharmacy_appointment_list
	
invariants
	@inv1: appointment ⊆ DATE
	@inv2: phars ⊆ PHARMACIES
	@inv3: pres ⊆ PRESCRIPTIONS
	@inv4: booked ⊆ NRIC
	@inv5: booking ⊆ appointment
	@inv6: accepted_booked ⊆ NRIC 
	@inv7: prescriptions ∈ pres ⤔ ran(nric)
	@inv8: available_appointment ∈ appointment ⇸ PHARMACIES
	@inv9: booked_appointment ∈ appointment ⇸ PHARMACIES
	@inv10: offer ∈ booked ⤔ appointment
//	@inv9: offer ∈ booked ⤔ appointment
	@inv11: accepted_appointment ∈ accepted_booked ⤔ booking
	@inv12: rejected_appointment ∈ booked ⤔ appointment
	
//	@inv4: client_ic ⊆ NRIC
//	@inv6: prescriptions ∈ booked ⤖ pres
//	@inv6: prescriptions ∈ booked ↔ pres
//	@inv5: prescriptions ∈ NRIC ↔ pres
//	@inv7: offer ∈ client_ic ⤖ available_appointment
//	@inv6: offer ∈ NRIC ⤖ appointment
//	@inv8: accepted_appointment ∈ booked ⤖ appointment	
//	@inv4: client_ic ⊆ NRIC
//	@inv5: client_appointment ∈ registered → appointment
//	@inv6: accepted_appointment ∈ registered → appointment

event INITIALISATION extends INITIALISATION
then
	@act11: appointment ≔ ∅
	@act12: phars ≔ ∅
	@act13: prescriptions ≔ ∅
	@act14: offer ≔ ∅ 
	@act15: booked ≔ ∅ 
	@act16: booking ≔ ∅
	@act17: accepted_booked ≔ ∅ 
	@act18: pres ≔ ∅
	@act19: available_appointment ≔ ∅
	@act20: booked_appointment ≔ ∅
	@act21: accepted_appointment ≔ ∅
	@act22: rejected_appointment ≔ ∅
	
	//--------------------------------
//	@act18: client_ic ≔ ∅
	
end

//event addDateToAppointment  // relate a date to every pharmacy appointment
//any
//	apt_num
//	appointment
//	available_appointment_date //date
//	pharmacy //pharmacy name
//	get_date
//where
//	@grd1: apt_num ∈ ℕ1
//	@grd2: appointment ∈ dom(appointment_date)
//	@grd3: available_appointment_date ∈ ran(appointment_date)
//	@grd4: pharmacy ∈ ran(pharmacies)
//	@grd5: {(available_appointment_date ↦ appointment_num)} ↦ pharmacy ∉ pharmacy_appointment_list
//	@grd6: get_date ∈ dom(pharmacy_appointment_list)
//	@grd7: available_appointment_date ∉ dom(pharmacy_apppointment_num)
//then
//	@act1: appointment_num(pharmacy) ≔ apt_num
//	@act1: pharmacy_appointment_list ≔ pharmacy_appointment_list ∪ {{(appointment_date ↦ appointment_num)} ↦ pharmacy}
//end


//
//event CreateDate
//any
//	dt
//where
//	@grd1: dt ∉ date
//	@grd2: card(pharmacies) ≥ 1
//then
//	@act1: date ≔ date ∪ {dt}
//end
	

event BookAppointment
any 
	ic
where
	@grd1: role(current_user) = Client
	@grd2: current_user ≠ no_user
	@grd3: ic ∉ booked
	@grd4: ic ∈ ran(nric)
//	@grd2: ic ∈ ran(nric)
//	@grd3: prescription = no_prescription
//	@grd4: date = no_date
then
	@act1: booked ≔ booked ∪ {ic}
end

event CreateNewPrescription
any 
	p
	ic
where
	@grd1: role(current_user) ∈ {Admin, Staff}
	@grd2: current_user ≠ no_user
	@grd3: ic ∈ booked
	@grd4: ic ∈ ran(nric)
	@grd7: p ∉ pres
	@grd9: ic ∉ ran(prescriptions)
//	@grd8: p ↦ ic ∉ prescriptions	
then 
	@act2: pres ≔ pres ∪ {p}
	@act1: prescriptions ≔ prescriptions ∪ {p ↦ ic}
end

event CreateUpdatedPrescription
any 
	p
	ic
	updated_p
where
	@grd1: role(current_user) ∈ {Admin, Staff}
	@grd2: current_user ≠ no_user
	@grd3: ic ∈ booked
	@grd4: ic ∈ ran(nric)
	@grd5: updated_p ∉ pres
	@grd6: updated_p ≠ p
	@grd7: p ∈ pres
	@grd8: p ↦ ic ∈ prescriptions	
then 
	@act2: pres ≔ (pres ∖ {p}) ∪ {updated_p}
	@act1: prescriptions ≔ (prescriptions ∖ {p ↦ ic}) ∪ {updated_p ↦ ic }
end

//event OfferAppointment
//any p ic d
//where
//	@grd1: role(current_user) ∈ {Admin, Staff}
//	@grd2: current_user ≠ no_user
//	@grd3: p ∈ pres
//	@grd4: ic ∈ booked
//	@grd5: ic ↦ p ∈ prescriptions
//	@grd6: d ∉ appointment
//	@grd7: ic ↦ d ∉ offer
//then
//	@act1: offer ≔ offer ∪ {ic ↦ d}	
//end


event CreateAvailableAppointment
any d ph apt_created apt_num 
where
	@grd1: role(current_user) ∈ {Admin, Staff}
	@grd2: current_user ≠ no_user
//	@grd3: ph ∈ ran({current_user} ◁ pharmacies)
	@grd3:ph ∈ ran (pharmacies)
	@grd4: d ∉ appointment
//	@grd5: d ∉ booking
	@grd6: d ↦ ph ∉ available_appointment
	@grd7: apt_created = card(available_appointment ▷ {ph})
	@grd8: apt_num = appointment_num(ph)
	@grd9: apt_created ≤ apt_num − 1
then
	@act1:appointment ≔ appointment ∪ {d}
	@act2:available_appointment ≔ available_appointment ∪ {d ↦ ph}
end

//-----------------------------------------------------------------
event OfferAppointment
any p ic d ph 
where
	@grd1: role(current_user) ∈ {Admin, Staff}
	@grd2: current_user ≠ no_user
	@grd3: p ∈ pres
	@grd4: ic ∈ booked
	@grd5: ic ∈ ran(nric)
	@grd11: d ∉ ran(rejected_appointment) 
	@grd6: p ↦ ic ∈ prescriptions
	@grd7: d ∈ appointment
	@grd8: ph ∈ ran (pharmacies)
//	@grd7: of_d ∉ appointment
	@grd9: ic ↦ d ∉ offer
	@grd10: d ↦ ph ∈ available_appointment
then
	@act1: offer ≔ offer ∪ {ic ↦ d}	
end

event getOfferedAppointment
any result ic p d ph
where
	@grd1: role(current_user) = Client
	@grd2: current_user ≠ no_user
	@grd3: ic ∈ booked
	@grd4: ic ∈ ran(nric)
	@grd5: p ∈ pres
	@grd6: d ∈ booking
	@grd7: ph ∈ ran (pharmacies)
	@grd8: ic ↦ d ∈ offer
	@grd9: ic ↦ d ∉ accepted_appointment
	@grd10: d ↦ ph ∈ available_appointment 
	@grd11: result = ({ic} ◁ offer)
end

event AcceptAppointment
any 
	ic d ph
where
	@grd1: role(current_user) = Client
	@grd2: current_user ≠ no_user
	@grd3: ic ∈ booked
	@grd4: ic ∈ ran(nric)
	@grd5: d ∈ ran({ic} ◁ offer)
	@grd6: ph ∈ ran({d} ◁ available_appointment)
//	@grd5: d ∈ ran(offer)
//	@grd6: d ∉ booking
//	@grd7: ph ∈ ran(pharmacies)
//	@grd8: ic ↦ d ∈ offer
//	@grd9: d ↦ ph ∈ available_appointment 
//	@grd10: ic ↦ d ∉ accepted_appointment
	
then
	@act1: booking ≔ booking ∪ {d}
	@act2: accepted_appointment ≔ accepted_appointment ∪ {ic ↦ d}
	@act3: offer ≔ offer ∖ {ic ↦ d}
	@act4: booked_appointment ≔ booked_appointment ∪ {d ↦ ph}
	@act5: available_appointment ≔ available_appointment ∖ {d ↦ ph}
	@act6: accepted_booked ≔ accepted_booked ∪ {ic}
	@act7: booked ≔ booked ∖ {ic}
	@act8: rejected_appointment ≔ {ic} ⩤ rejected_appointment
	
end

event RejectAppointment
any ic d
where
	@grd1: role(current_user) = Client
	@grd2: current_user ≠ no_user
	@grd3: ic ∈ booked
	@grd4: ic ∈ ran(nric)
	@grd5: d ∈ appointment
	@grd6: d ∉ booking
	@grd7: ic ↦ d ∈ offer
	@grd8: ic ↦ d ∉ accepted_appointment
	@grd9: ic ↦ d ∉ rejected_appointment
	
then
//	@act1: booking ≔ booking ∪ {d}
	@act2: rejected_appointment ≔ rejected_appointment ∪ {ic ↦ d}
	@act3: offer ≔ offer ∖ {ic ↦ d}

//	@act4: booked ≔ booked ∖ {ic}
	
end

//event RebookAppointment
//any ic d ph
//where
//	@grd1: role(current_user) = Client
//	@grd2: current_user ≠ no_user
//	
////	@grd3: ic ∈ booked 
////	@grd4: d ∈ booking
////	@grd5: ph ∈ ran(pharmacies)
////	@grd6: d ↦ ph ∉ available_appointment 
////	@grd7: d ↦ ph ∈ booked_appointment
////	@grd8: ic ↦ d ∉ offer
////	@grd9: ic ↦ d ∈ accepted_appointment
////	@grd10: ic ↦ d ∉ rejected_appointment
////	@grd11: d = accepted_appointment(ic)
////	@grd12: ph = available_appointment(d)
//then
////	@act1: booked ≔ booked ∪ {ic}
////	@act2: available_appointment ≔ available_appointment ∪ {d ↦ ph}
//	
////	@act1: accepted_appointment ≔ accepted_appointment ∪ {ic ↦ d}
////	@act2: offer ≔ offer ∖ {ic ↦ d}
////	@act3: booked_appointment ≔ booked_appointment ∪ {d ↦ ph}
////	@act4: available_appointment ≔ available_appointment ∖ {d ↦ ph}
//end	

//-----------------------------------------------------------------
//event OfferAppointment
//any
//	apt
//	pmc
//	ic
//where
//	@grd1: role(current_user) ≠ Client
//	@grd2: ic ∈ ran(booked)
//	@grd3: apt ∈ appointment 
//	@grd4: pmc ∈ phars
//	@grd5: dt ∈ date
//	@grd6: apt_created_num = card(available_appointment ▷ {pmc})
//	@grd7: apt_num = card({pmc} ◁ appointment_num)
//	@grd8: apt_created_num ≤ apt_num
//then
//	@act1: client_appointment ≔ client_appointment ∪ {ic↦ pmc}
//end


//event OfferAppointment
//any 
//	pharmacy
//	medicine_name
//	appointment
//	date
//	batch_num
//	ic
//	prescription
//where
//	@grd1: current_user ≠ no_user  //check logged in
//	@grd2: ic ∈ ran(nric) //check ic
//	@grd3: pharmacy ∈ ran(pharmacies)  //check pharmacy
//	@grd4: medicine_name ∈ ran(medicine)
//	@grd5: batch_num ∈ ran(medicine_info)
//	@grd6: appointment ∈ APPOINTMENT
//	@grd7: prescription = ran({nric(client)} ◁ prescriptions) //check prescription
//end
//
//event AcceptAppointment
//any 
//	ic 
//	pharmacy 
//	booking 
//where
//	@grd1: role(client) = Client
//	@grd2: ic ∈ ran(nric)   
//	@grd3: client ∈ USER
//	@grd4: pharmacy ∈ pharmacies
//	@grd5: booking ∈ available_booking
//	@grd6: (pharmacy ↦ booking) ∈ appointment_available
//	@grd7-accepted_appointment-not-belongs-client: accepted_appointment(ic) ≠ pharmacy
//then
//	@act1-appointment-belongs-clients: accepted_appointment(ic) ≔ pharmacy
//end
//
//
//
//event RejectAppointment
//any 
//	client
//	ic 
//	pharmacy 
//	booking 
//	rejected_pharmacy 
//	rejected_booking
//where
//	@grd1: role(client) = Client
//	@grd2: client ∈ USER
//	@grd4: pharmacy ∈ pharmacies
//	@grd5: booking ∈ available_booking
//	@grd6: (pharmacy ↦ booking) ∈ appointment_available
//	@grd7: accepted_appointment(ic) ≠ pharmacy
//	@grd8: rejected_booking ∈ dom(apppointment_time)
//	@grd9: (rejected_appointment ↦ rejected_pharmacy) ∉ appointment_available
//	@grd10: booking_process(available_booking) = ic
//end


// 	event AbandonAppointment
//	any
//	where
//	then
//	end
//	
//	event AbandonSystem
//	any
//	where
//	then
//	end
//
//	event ViewAppointment
//	any
//	where
//	then
//	end
//
//	event RebookAppointment
//	any
//	where
//	then
//	end


event Login extends Login
end
event Logout extends Logout 
end
event ChangeUserPassword extends ChangeUserPassword
end
event RegisterClient extends RegisterClient 
end
event RegisterAdminOrStaff extends RegisterAdminOrStaff 
end
event AddPharmacy extends AddPharmacy
end
event AddMedicine extends AddMedicine
end
//event getPrescription extends getPrescription
//end
event updateAptNum extends updateAptNum
end
event getClientName extends getClientName
end