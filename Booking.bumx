machine Booking
refines Pharmacy
sees BookingContext

variables
	password
	registered
	current_user
	role
	
	pharmacies
	medicine
	medicine_qty
	client_name
	nric
	prescriptions
	medicine_info
//	received_medicine_info
	received_batch_num
	last_medicine_date
	pharmacy_stock
	appointment_num
	current_day
	
	offer
	appointment_date
	appointment_pharmacy
	booking_nric
	appointment
	appointment_type
	booking
	booking_status
	
invariants
	//@typeof-appointment: appointment ⊆ APPOINTMENT
	@appointment-status: partition(APPOINTMENT, appointment, booking)
	@typeof-appointment-type: appointment_type ∈ appointment ↔ APPOINTMENT_STATUS
	@typeof-appointment-date: appointment_date ∈ APPOINTMENT ↔ ℕ1
	@typeof-appointment-pharmacy: appointment_pharmacy ∈ PHARMACIES ⤖ APPOINTMENT
	@typeof-appointment-nric: booking_nric ∈ booking → NRIC
	@typeof-booking-status: booking_status ∈ NRIC → BOOKING_STATUS
	@typeof-booked-offer: offer ∈ NRIC ↔ appointment

event INITIALISATION extends INITIALISATION
then	
	@init-appointment: appointment ≔ ∅
	@init-booking: booking ≔ ∅
	@typeof-appointment-date: appointment_date ≔ ∅
	@typeof-appointment-pharmacy: appointment_pharmacy ≔ ∅
	@typeof-appointment-nric: booking_nric ≔ ∅
	@typeof-appointment-type: appointment_type ≔ ∅
	@typeof-booking-status: booking_status ≔ ∅
	@init-offer: offer ≔ ∅ 
end

//-----------------------------------------------------------------

/*	REQ16: Staff or Admin can create appointment if pharmacy exists */
event CreateAvailableAppointment
any 
d 
ph 
appt
where
	@is-admin-or-staff: current_user ↦ Staff ∈ role ∨ current_user ↦ Admin ∈ role
	@does-pharmacy-exist: ph ∈ ran(pharmacies)
	@appointment-available: card(appointment_pharmacy ▷ {appt}) ≤ appointment_num(ph)
	@new_appointment_does-not-exist: appt ∈ APPOINTMENT
	@appointment-does-not-exist: appt ∉ appointment
	@booking-does-not-exist: appt ∉ booking
    @new-appointment-date: d ∈ ℕ1 ∧ d ≥ current_day
then
	@add-appointment: appointment ≔ appointment ∪ {appt}
	@set-appointmnet-type: appointment_type(appt) ≔ Available
    @set-appointment-date: appointment_date(appt) ≔ d
    @set-appointment-pharmacy: appointment_pharmacy(ph) ≔ appt
end

/*REQ19: Client can book appointment if they have a prescription */
/*REQ24: The booking is stopped if there are no more available appointments 
 * within the 7 days from the date of login to the appointment offer.
 */
event BookAppointment
where
	@is-client: current_user ↦ Client ∈ role
	@did-client-book-appt: booking_status(nric(current_user)) = False
then
	@book-appt: booking_status(nric(current_user)) ≔ True
end

/*REQ20: Staff or Admin can offer appointment to Client */
/*If Client is registered and has prescription, pharmacy has appointment, offer is available */
event OfferAppointment
any p ic appt ph 
where
	@is-admin-or-staff: current_user ↦ Staff ∈ role ∨ current_user ↦ Admin ∈ role
	@does-prescription-exist: p ∈ ran(prescriptions)
	@did-client-book-appt: booking_status(ic) = True
	@does-ic-exist: ic ∈ ran(nric)
	@is-day-rejected-appt: appointment_type(appt) ≠ Rejected
	@is-client-correct-prescription: ic ↦ p ∈ prescriptions
	@is-day-appt: appt ∈ appointment
	@does-pharmacy-exist: ph ∈ ran(pharmacies)
	@check-user-offer: ic ↦ appt ∉ offer
then
	@offer-client-appt: offer ≔ offer ∪ {ic ↦ appt}	
end

/*REQ20: Client can view offered available appointment */
/*Client's IC relates to available appointment of any pharmacy */
event getOfferedAppointment
any result ic p d ph
where
	@is-client: current_user ↦ Client ∈ role
	@does-ic-exist: ic ∈ ran(nric)
	@does-prescription-exist: p ∈ dom(prescriptions)
	@is-appt-in-booking: d ∈ ran(offer)
	@does-pharmacy-exist: ph ∈ ran (pharmacies)
	@check-client-offer: ic ↦ d ∈ offer
	@get-offer: result = ({ic} ◁ offer)
end

/*Client can accept appointment once he/she confirms appointment */
/*REQ22: A client is offered the earliest available appointment at any pharmacy */
event AcceptAppointment
any 
	d
where
	@is-client: current_user ↦ Client ∈ role
	@did-client-book-appt: booking_status(nric(current_user)) = True
	@check-if-appt-was-offered: d ∈ ran({nric(current_user)} ◁ offer)
	@check-client-offer: nric(current_user) ↦ d ∈ offer
then
	@remove-appointment: appointment ≔ appointment ∖ {offer(nric(current_user))}
	@add-booking: booking ≔ booking ∪ {offer(nric(current_user))}
	@remove-offer: offer ≔ offer ∖ {nric(current_user) ↦ offer(nric(current_user))}
	@add-booking-nric: booking_nric ≔ booking_nric ∪ {offer(nric(current_user)) ↦ nric(current_user)}

end

///*REQ23: At any point during the booking process, 
// * the client can abandon the system without completing the booking */
event AbandonSystem
where
	@is-client: current_user ↦ Client ∈ role
	@did-client-not-book-appt: booking_status(nric(current_user)) = True
then
	@remove-client-from-booked: booking_status(nric(current_user)) ≔ False
end

event Login extends Login
end
event Logout extends Logout 
end
event ChangeUserPassword extends ChangeUserPassword
end
event RegisterClient extends RegisterClient 
any 
	new_status
where 
	@no-status: new_status ∉ dom(nric)
then 
	@add-status-to-user: booking_status(ic) ≔ False
end
event RegisterAdminOrStaff extends RegisterAdminOrStaff
end
event AddPharmacy extends AddPharmacy
end
event AddMedicine extends AddMedicine
end
event InitPrescription extends InitPrescription
end
event GetPrescription extends GetPrescription
end
event UpdateAptNum extends UpdateAptNum
end
event GetClientName extends GetClientName
end
event NextDay extends NextDay
end
//event appendPrescription extends appendPrescription
//end
//event updatePrescription extends updatePrescription
//end