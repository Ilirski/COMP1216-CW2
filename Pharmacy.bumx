machine Pharmacy refines User
sees PharmacyContext

variables
	users
	login
	admins
	staff
	clients
	
	pharmacies
	medicine
	medicine_count
	client_name
	nric
	prescription
	medicine_info
	last_medicine_date
	pharmacy_stock
	appointment_num
	
	
invariants
	@inv1: pharmacies ∈ USER ↔ PHARMACIES
	@inv2: medicine ∈ BATCH_NUM ↔ MEDICINE_NAME
	@inv3: medicine_count ∈ BATCH_NUM ↔ ℤ
	@inv4: client_name ∈ NRIC ⇸ USER_NAME
	@inv5: nric ∈ USER ↔ NRIC
	@inv6: prescription ∈ NRIC ↔ PRESCRIPTION
	@inv7: medicine_info ∈ PRESCRIPTION ↔ BATCH_NUM
	@inv8: last_medicine_date ∈ PRESCRIPTION ↔ DATE
	@inv9: pharmacy_stock ∈ PHARMACIES ↔ BATCH_NUM
	@inv10: appointment_num ∈ PHARMACIES ↔ ℤ


event INITIALISATION extends INITIALISATION
then
	@act1: pharmacies ≔ ∅
	@act2: medicine ≔ ∅
	@act3: medicine_count ≔ ∅ 
	@act4: client_name ≔ ∅
	@act5: nric ≔ ∅
	@act6: prescription ≔ ∅
	@act7: medicine_info ≔ ∅
	@act8: last_medicine_date ≔ ∅ 
	@act9: pharmacy_stock ≔ ∅
	@act10: appointment_num ≔ ∅
end


event AddPharmacy
any 
	pharmacy
	administrator
where
	@grd1: p ∈ PHARMACIES ∧ p ∉ ran(pharmacies)
	@grd3: administrator ∈ admin
then 
	@act1: pharmacies ≔ {a ↦ p}
end


event AddMedicne
any 
	pharmacy
	medicine_name
	batch
	count
where 
	@grd1: pharmacy ∈ pharmacies
	@grd2: batch ∈ BATCH ∧ b ∉ dom(medicine)
	@grd3: medicine_name ∈ MEDICINE_NAME
	@grd4: count ∈ ℤ
then
	@act1: pahrmacy_stock ≔ pahrmacy_stock ∪ {p ↦ b}
	@act2: medicine ≔ medicine ∪ {b ↦ m}
	@act3: medicine_count ≔ {b ↦ count}
end
/* 
event getName
any
	 c
	 p
	 result
where
	@grd1: c ∈ 
*/