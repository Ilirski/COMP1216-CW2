machine Pharmacy 
refines User
sees PharmacyContext

variables
	password
	registered
	current_user
	role
	
	pharmacies
	medicine
	medicine_qty
	client_name
	nric
	prescriptions
	medicine_info
	last_medicine_date
	pharmacy_stock
	appointment_num
	received_medicine_info
	gave_away_medicine_qty
	
invariants

	/* An admin can register multiple pharmacies */
	@typeof-pharmacies: pharmacies ∈ USER ↔ PHARMACIES
	
	 /* REQ 10 : */
	 /* Each packet of medicine has a batch number*/
	 /* Each batch number will link to a medicine name*/
	@typeof-medicine: medicine ∈ BATCH_NUM ⇸ MEDICINE_NAME
	
	 /* Each batch of medicine will has its own quantity of stock */
	 /* The stock only can be one integer number [0, ∞) */
	@typeof-medicine-qty: medicine_qty ∈ BATCH_NUM ⇸ ℕ
	@typeof-received-med-info: received_medicine_info ∈ PRESCRIPTIONS ↔ BATCH_NUM
	@type-of-gave-away-med-qty: gave_away_medicine_qty ∈ BATCH_NUM ⇸ ℕ
	
	 /* REQ 11: Each client has a name, NRIC and list of prescription*/
	@typeof-client-name: client_name ∈ NRIC ⇸ USER_NAME
	@typeof-nric: nric ∈ USER ⤔ NRIC
	@typeof-prescriptions-list: prescriptions ∈ NRIC ⤔ PRESCRIPTIONS
	@typeof-received-batch-num: received_medicine_info ∈ PRESCRIPTIONS ↔ BATCH_NUM
	
	/* REQ 12: */ 
	/* Each prescription includes medicine_info (list of medicine) */
	/* Prescription also includes last received medicine date */
	@prescription-medicine-info: medicine_info ∈ PRESCRIPTIONS ↔ BATCH_NUM
//---------------------------------------------------------------------------------------------------------------------------------
//	@prescription-used-medicine-info: used_medicine_info ∈ PRESCRIPTIONS ↔ BATCH_NUM
//	@inv1: received_medicine_info ∈ PRESCRIPTIONS ↔ BATCH_NUM
//---------------------------------------------------------------------------------------------------------------------------------
	@prescription-last-medicine-date: last_medicine_date ∈ PRESCRIPTIONS ⇸ DATE
	
	/* REQ 14: A pharmacy has a medicine stock specifying the availability of medicines. */
	@typeof-pharmacy-stock: pharmacy_stock ∈ PHARMACIES ↔ BATCH_NUM
	
	/* REQ 16: A pharmacy has a daily number of appointments. */
	@typeof-pharmacy-num: appointment_num ∈ PHARMACIES ⇸ ℕ1

event INITIALISATION extends INITIALISATION
then
	@act-init-pharmacies: pharmacies ≔ ∅
	@act-init-medicine: medicine ≔ ∅
	@act-init-medicine-qty: medicine_qty ≔ ∅ 
	@act-init-client-name: client_name ≔ ∅
	@act-init-nric: nric ≔ ∅
	@act-prescriptions: prescriptions ≔ ∅
	@act-medicine-info: medicine_info ≔ ∅
	@act-last-medicine-date: last_medicine_date ≔ ∅ 
	@act-pharmacy-stock: pharmacy_stock ≔ ∅
	@act-daily-appointment-num: appointment_num ≔ ∅
	@act-received-medicine-info: received_medicine_info ≔ ∅
	@act-gave-away-med-qty: gave_away_medicine_qty ≔ ∅
end

/* Only the admin can register a new pharmacy */
event AddPharmacy
any 
	pharmacy
	apt_num
where
	@is-admin: current_user ↦ Admin ∈ role
	@is-apt-num-positive-integer: apt_num ∈ ℕ1
	@does-pharmacy-exist: pharmacy ∉ ran(pharmacies)
	@is-pharmacy-available: pharmacy ∉ dom(appointment_num)
then 
	@add-pharmacy-with-user: pharmacies ≔ pharmacies ∪ {current_user ↦ pharmacy}
	@add-apt-num: appointment_num ≔ appointment_num ∪ {pharmacy ↦ apt_num}
end

/* REQ 15:  An administrator can update the medicine stock by adding more medicine batches. */
event AddMedicine
any 
	pharmacy
	medicine_name
	batch
	qty
where
	@is-admin: current_user ↦ Admin ∈ role
	@is-admin-authorized: pharmacy ∈ ran({current_user} ◁ pharmacies)
	@does-batch-exist: batch ∉ dom(medicine)
	@check-medicine-name: medicine_name ∈ MEDICINE_NAME
	@is-qty-positive-integer: qty ∈ ℕ1
then
	@add-stock-to-pharmacy: pharmacy_stock ≔ pharmacy_stock ∪ {pharmacy ↦ batch}
	@add-medicine-name-to-batch: medicine ≔ medicine ∪ {batch ↦ medicine_name}
	@add-qty-to-batch: medicine_qty ≔ {batch ↦ qty}
end


//event InitPrescription
//any 
//	ic
//	batch_num
//	pres
//where
//	@is-admin-or-staff: current_user ↦ Staff ∈ role ∨ current_user ↦ Admin ∈ role
//	@does-batch-num-exist: batch_num ∈ dom(medicine)
//	@does-nric-exist: ic ∈ ran(nric)
//	@check-user-prescription: ic ∉ dom(prescriptions)
//	@is-prescription-valid: pres ∈ PRESCRIPTIONS
//then 
//	@add-prescription:  prescriptions ≔ prescriptions ∪ {ic ↦ pres}
//	@add-medicine-info: medicine_info ≔ medicine_info ∪ {pres ↦ batch_num}
//end

/* REQ 13:  A client can retrieve their prescriptions from the system. */

/* Any administrator can update information about the pharmacy */
/* Updates include number of available appointments for pickup of medicine packets per day */


//---------------------------------------------------------------------------------
/*An Administrator or Staff can initialise a prescription*/
/*The initialised prescription is added to a Client's list of prescriptions*/ 
event InitPrescription
any 
	ic
	batch_num
	pres
where
	@is-admin-or-staff: current_user ↦ Staff ∈ role ∨ current_user ↦ Admin ∈ role
	@does-batch-num-exist: batch_num ∈ dom(medicine)
	@does-nric-exist: ic ∈ ran(nric)
	@check-user-prescription: ic ∉ dom(prescriptions)
	@is-prescription-valid: pres ∈ PRESCRIPTIONS
	@does-prescription-exist: pres ∉ ran(prescriptions)
then 
	@add-prescription:  prescriptions ≔ prescriptions ∪ {ic ↦ pres}
	@add-medicine-info: medicine_info ≔ medicine_info ∪ {pres ↦ batch_num}
end

/* REQ 13:  A client can retrieve their prescriptions from the system. */
event GetPrescription
any
	result
where
	@is-client: current_user ↦ Client ∈ role
	@current-user-has-nric: current_user ∈ dom(nric)
	@get-client-prescription: result = ran({nric(current_user)} ◁ prescriptions)
end

/* REQ 18:  An administrator or a staff can view the client’s details using their 
 * NRIC (MyKad) number. */
event GetClientName
any 
	ic
	result
where 
	@is-admin-or-staff: current_user ↦ Staff ∈ role ∨ current_user ↦ Admin ∈ role
	@does-nric-exist: ic ∈ ran(nric)
	@get-client-name: result = client_name[{ic}]
end	

/* Any administrator can update information about the pharmacy */
/* Updates include number of available appointments for pickup of medicine packets per day */
event UpdateAptNum
any 
	pharmacy
	apt_num
where
	@is-admin: current_user ↦ Admin ∈ role
	@is-admin-authorized: pharmacy ∈ ran({current_user} ◁ pharmacies)
	@is-apt-num-positive-integer: apt_num ∈ ℕ1
then
	@add-apt-num: appointment_num(pharmacy) ≔ apt_num 
end

event ReceiveFirstQuantityBatchNumberMedicine
any  p batch_num stock_created med_gave_away
where
	@is-client: current_user ↦ Client ∈ role
	@does-prescription-exists: p ∈ ran(prescriptions)
	@does-batch-exist: batch_num ∉ ran(received_medicine_info)
	@get-prescription-batch-num: batch_num = medicine_info(p)
	@is-stock-integer: stock_created ∈ ℕ
	@is-med-gave-away-integer: med_gave_away ∈ ℕ
	@does-batch-num-exist: batch_num ∉ dom(gave_away_medicine_qty)
	@get-stock-created-qty: stock_created = medicine_qty(batch_num)
	@get-med-gave-away-qty: med_gave_away = card(medicine_info ▷ {batch_num})
	@is-stock-enough: stock_created ≥ med_gave_away
then
	@add-medicine-gave-away-num: gave_away_medicine_qty ≔ gave_away_medicine_qty ∪ {batch_num ↦ 1}
	@add-med-info: received_medicine_info≔ received_medicine_info ∪ {p ↦ batch_num}
	@remove-batch-num: medicine_info ≔ medicine_info ∖ {p ↦ batch_num}
	@update-stock: medicine_qty(batch_num) ≔  stock_created − 1
end

event ReceiveMedicine
any p batch_num stock_created med_gave_away
where
	@is-client: current_user ↦ Client ∈ role
	@does-prescription-exists: p ∈ ran(prescriptions)
	@does-batch-exist: batch_num ∉ ran(received_medicine_info)
	@get-batch-num: batch_num = medicine_info(p)
	@is-stock-integer: stock_created ∈ ℕ
	@is-med-gave-away-integer: med_gave_away ∈ ℕ
	@does-batch-num-exist: batch_num ∈ dom(gave_away_medicine_qty)
	@get-stock-created-qty: stock_created = medicine_qty(batch_num)
	@get-med-gave-away-qty: med_gave_away = card(medicine_info ▷ {batch_num})
	@is-stock-enough: stock_created ≥ med_gave_away
then
	@add-batch-num: received_medicine_info ≔ received_medicine_info ∪ {p ↦ batch_num}
	@remove-batch-num: medicine_info ≔ medicine_info ∖ {p ↦ batch_num}
	@update-med-give-away: gave_away_medicine_qty(batch_num)  ≔ med_gave_away
	@deduct-med-qty: medicine_qty(batch_num) ≔  stock_created − gave_away_medicine_qty(batch_num)
end

//event appendPrescription
//any 
//	ic
//	batch_num
//	p
//where
//	@grd1: role(current_user) ∈ {Admin, Staff}
//	@grd2: batch_num ∈ dom(medicine)
//	@grd3: ic ∈ dom(prescriptions)
//	@grd4: p = prescriptions(ic)
//	@grd5: medicine[{batch_num}] ⊈ medicine[{medicine_info(p)}]
//then  
//    @act1: medicine_info ≔ medicine_info ∪ {p ↦ (batch_num)}
//end	

///*receiving medicine */
//event updatePrescription
//any 
//	ic
//	pres
//	batch_num
//	med
//	stock_created
//	med_gave_away
//where 
//	@grd1: role(current_user) ∈ {Admin, Staff}
//	@grd3: ic ∈ dom(prescriptions)
//	@grd4: pres = prescriptions(ic)
//	@grd5: batch_num ∈ ran({pres} ◁ medicine_info)
//	@grd6: med ∈ ran({batch_num} ◁ medicine)
//	@grd7: stock_created = medicine_qty(batch_num)
//	@grd8: med_gave_away = card(medicine_info ▷ {batch_num})
//	@grd9: stock_created ≥ med_gave_away
//then 
//	@act1: medicine_info ≔ medicine_info ∖ ({pres} ◁ medicine_info)
//	@act2: received_medicine_info ≔ received_medicine_info ∪ {({pres} ◁ medicine_info)}
//	@act3: medicine_qty ≔ medicine_qty ∖ {batch_num ↦ stock_created}
//	@act4: medicine_qty ≔ medicine_qty ∪ {batch_num ↦ (stock_created − med_gave_away)}
//	@act5: medicine_info ≔ medicine_info ∪ {pres ↦ batch_num}
//end

//event UpdateBatchNumberInPrescription
//any
//where
//then
//end

//---------------------------------------------------------------------------------

event Login extends Login
end

event Logout extends Logout
end

event ChangeUserPassword extends ChangeUserPassword
end

/*Extension: Client registration includes NRIC and USER_NAME*/
event RegisterClient extends RegisterClient 
any 
	ic
	name
where 
	@is-nric-unique: ic ∉ ran(nric) ∧ ic ∉ dom(client_name)
	@is-client-name-unique: name ∈ USER_NAME
	@no-nric-belongs-to-new-user: new_user ∉ dom(nric)
then 
	@add-nric-to-user: nric ≔ nric ∪ {new_user ↦ ic}
	@add-name-to-user: client_name ≔ client_name ∪ {ic ↦ name}
end

event RegisterAdminOrStaff extends RegisterAdminOrStaff
end