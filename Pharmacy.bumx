machine Pharmacy 
refines User
sees PharmacyContext

variables
	password
	registered
	current_user
	role
	
	pharmacies
	medicine
	medicine_qty
	client_name
	nric
//	prescriptions
//	medicine_info
//	last_medicine_date
	pharmacy_stock
	appointment_num
	
	
invariants
	 /* An admin can register multiple pharmacies */
	@typeof-pharmacies: pharmacies ∈ USER ↔ PHARMACIES
	
	 /* REQ 10 : */
	 /* Each packet of medicine has a batch number*/
	 /* Each batch number will link to a medicine name*/
	@typeof-medicine: medicine ∈ BATCH_NUM ⇸ MEDICINE_NAME
	
	 /* Each batch of medicine will has its own quantity of stock */
	 /* The stock only can be one integer number [0, ∞) */
	@typeof-medicineqty: medicine_qty ∈ BATCH_NUM ⇸ ℕ
	
	 /* REQ 11: Each client has a name, NRIC and list of prescription*/
	@typeof-client-name: client_name ∈ NRIC ⇸ USER_NAME
	@typeof-nric: nric ∈ USER ⤔ NRIC
	@typeof-prescriptions-list: prescriptions ∈ NRIC ↔ PRESCRIPTIONS
	
	/* REQ 12: */ 
	/* Each prescription includes medicine_info (list of medicine) */
	/* Prescription also includes last received medicine date */
	@prescription-medicine-info: medicine_info ∈ PRESCRIPTIONS ↔ BATCH_NUM
	@prescription-last-medicine-date: last_medicine_date ∈ PRESCRIPTIONS ⇸ DATE
	
	/* REQ 14: A pharmacy has a medicine stock specifying the availability of medicines. */
	@typeof-pharmacy-stock: pharmacy_stock ∈ PHARMACIES ↔ BATCH_NUM
	
	/* REQ 16: A pharmacy has a daily number of appointments. */
	@typeof-pharmacy-num: appointment_num ∈ PHARMACIES ⇸ ℕ1


event INITIALISATION extends INITIALISATION
then
	@act-init-pharmacies: pharmacies ≔ ∅
	@act-init-medicine: medicine ≔ ∅
	@act-init-medicine-qty: medicine_qty ≔ ∅ 
	@act-init-client-name: client_name ≔ ∅
	@act-init-nric: nric ≔ ∅
	@act-prescriptions: prescriptions ≔ ∅
	@act-medicine-info: medicine_info ≔ ∅
	@act-last-medicine-date: last_medicine_date ≔ ∅ 
	@act-pharmacy-stock: pharmacy_stock ≔ ∅
	@act-daily-appointment-num: appointment_num ≔ ∅
end

/* Only the admin can register a new pharmacy */
event AddPharmacy
any 
	pharmacy
	apt_num
where
	@does-pharmacy-exist: pharmacy ∈ PHARMACIES ∧ pharmacy ∉ ran(pharmacies)
	@check-logged-in: current_user ≠ no_user
	@is-registered-admin: current_user ∈ registered ∧ role(current_user) = Admin
	@is-apt-num-positive-integer: apt_num ∈ ℕ1
then 
	@add-pharmacy-with-user: pharmacies ≔ pharmacies ∪ {current_user ↦ pharmacy}
	@add-apt-num: appointment_num ≔ appointment_num ∪ {pharmacy ↦ apt_num}
end

/* REQ 15:  An administrator can update the medicine stock by adding more medicine batches. */
event AddMedicine
any 
	pharmacy
	medicine_name
	batch
	qty
where
	@is-registered-admin: current_user ∈ registered ∧ role(current_user) = Admin
	@is-admin-authorized: pharmacy ∈ ran({current_user} ◁ pharmacies)
	@does-batch-exist: batch ∈ BATCH_NUM ∧ batch ∉ dom(medicine)
	@check-medicine-name: medicine_name ∈ MEDICINE_NAME
	@is-qty-positive-integer: qty ∈ ℕ1
	@not-null: current_user ≠ no_user
then
	@add-stock-to-pharmacy: pharmacy_stock ≔ pharmacy_stock ∪ {pharmacy ↦ batch}
	@add-medicine-name-to-batch: medicine ≔ medicine ∪ {batch ↦ medicine_name}
	@add-qty-to-batch: medicine_qty ≔ {batch ↦ qty}
end

/* REQ 13:  A client can retrieve their prescriptions from the system. */
event getPrescription
any
	 result
where
	@is-registered-client: current_user ∈ registered ∧ role(current_user) = Client
	@not-null: current_user ≠ no_user
	@get-client-prescription: result = ran({nric(current_user)} ◁ prescriptions)
end

/* Any administrator can update information about the pharmacy */
/* Updates include number of available appointments for pickup of medicine packets per day */
event updateAptNum
any 
	pharmacy
	apt_num
where
	@is-registered-admin: current_user ∈ registered ∧ role(current_user) = Admin
	@not-null: current_user ≠ no_user
	@is-admin-authorized: pharmacy ∈ ran({current_user} ◁ pharmacies)
	@is-apt-num-positive-integer: apt_num ∈ ℕ1
then
	@add-apt-num: appointment_num(pharmacy) ≔ apt_num 
end 

/* REQ 18:  An administrator or a staff can view the client’s details using their 
 * NRIC (MyKad) number. */
event getClientName
any 
	ic
	result
where 
	@check-user-registered: current_user ∈ registered
	@is-admin-or-staff: role(current_user) ∈ {Admin, Staff}
	@not-null: current_user ≠ no_user
	@does-nric-exist: ic ∈ ran(nric)
	@get-client-name: result = client_name[{ic}]
end	



event Login extends Login
end

event Logout extends Logout
end

event ChangeUserPassword extends ChangeUserPassword
end

/*Extension: Client registration includes NRIC and USER_NAME*/
event RegisterClient extends RegisterClient 
any 
	ic
	name
where 
	@does-nric-exist: ic ∈ NRIC ∧ ic ∉ ran(nric)
	@is-name-username: name ∈ USER_NAME
then 
	@add-nric-to-user: nric ≔ nric ∪ {new_user ↦ ic}
	@add-name-to-user: client_name ≔ client_name ∪ {ic ↦ name}
end

event RegisterAdminOrStaff extends RegisterAdminOrStaff
end