machine User 
sees UserContext

variables
	accounts
	register
	login
	
	/* Note: */
	/* Not sure if I should have a set of users */
	/* I think the system should track a set of unregistered users */
	/* They are analogous to visitors to a website  */
	/* But on the other hand, it's a bit tricky to model unregistered users */
	/* Since there's not method that adds an unregistered user */
	users
	admins
	staff
	clients
invariants
      
    /* Some users may use the system but are not registered */
	@typeof-users: users ⊆ USER
	
	/* REQ 1: The system manages a set of registered users. */
	@typeof-register: register ⊆ users
      
    // Every registered user must have exactly one password.
    // The same password (or hash) can belong to one or many registered users.
    // (1..*) -> (1) but for some reason no work
	@typeof-account: accounts ∈ register → PASSWORD
    
	/* REQ 4: There are three types of users: administrators, staff, and clients */
	/* REQ 5: A registered user can only have one role in the system */
	@typeof-user-roles: partition(register, admins, staff, clients)
	
	/* Logged in users is a subset of registered users */
	@typeof-login: login ⊆ register
	
event INITIALISATION
	then
		@act-init-users: users ≔ {root_user}
		@act-init-admins: admins ≔ {root_user}
		@act-init-staff: staff ≔ ∅
		@act-init-clients: clients ≔ ∅
//		@act-init-accounts: accounts(root_user) ≔ root_password
		@act-init-accounts: accounts ≔ {root_user ↦ root_password}
		@act-init-register: register ≔ {root_user}
		@act-init-login: login ≔ ∅
	end
	
	/* REQ 2: The system should only allow a user to log in to the system using the correct password. */
	event LoginUser
	any
		user
		pass 
	where
		@check-registered: user ∈ register
		@check-password: accounts(user)= pass
		@check-not-loggedin: user ∉ login
	then
		@add-login: login ≔ login ∪ {user}
	end
	
	/* REQ 3: A logged-in user can log out of the system. */
	event LogoutUser
	any
		user
		pass
	where
		@check-loggedin: user ∈ login
		@check-password: pass = accounts(user)
	then
		@remove-login: login ≔ login ∖ {user}
	end
	
	/* REQ 9: A logged-in user can change their password. */
	event ChangeUserPassword
		any
			user
			new_pass
		where
			@user-logged-in: user ∈ login
			@new-pass: new_pass ∈ PASSWORD
			@password-is-different: accounts(user) ≠ new_pass
		then
			@set-password: accounts(user) ≔ new_pass
	end
	
	/* REQ 8: A client can register an account with the system directly. */
	event RegisterClient
		any
			user
			pass
		where
			@user: user ∈ USER
			@pass: pass ∈ PASSWORD
			@check-unregistered: user ∉ register
		then
			@add-user: users ≔ users ∪ {user}
			@add-register: register ≔ register ∪ {user}
			@add-client: clients ≔ clients ∪ {user}
			@set-password: accounts(user) ≔ pass
	end
	
	/* REQ 7: A logged-in administrator can register a new user for the role of administrator or staff. */
	event RegisterAdmin
		any 
			admin
			user
			pass
		where
			@admin-logged-in: admin ∈ admins ∩ login
			@user: user ∈ USER // USER and not users
			@not-registered: user ∉ register 
			@pass: pass ∈ PASSWORD
		then
			@add-user: users ≔ users ∪ {user}
			@add-register: register ≔ register ∪ {user}
			@add-admin: admins ≔ admins ∪ {user}
			@set-password: accounts(user) ≔ pass
	end
		
	/* REQ 7: A logged-in administrator can register a new user for the role of administrator or staff. */
	event RegisterStaff
		any 
			admin
			user
			pass
		where
			@admin-logged-in: admin ∈ admins ∩ login
			@user: user ∈ USER // USER and not users
			@not-registered: user ∉ register
			@pass: pass ∈ PASSWORD
		then
			@add-user: users ≔ users ∪ {user}
			@add-register: register ≔ register ∪ {user}
			@add-staff: staff ≔ staff ∪ {user}
			@set-password: accounts(user) ≔ pass
	end
end	

