machine User
sees UserContext

variables
	password
	registered
	current_user
	role
invariants
      
	/* REQ 1: The system manages a set of registered users. */
	@typeof-registered: registered ⊆ USER ∖ {no_user}
      
    /* Every registered user must have exactly one password. */
    /* The same password can belong to zero or many registered users. */
	@typeof-password: password ∈ registered → PASSWORD
    
	/* REQ 5: A user can only have one role in the system. */
	@typeof-role: role ∈ registered → ROLE
	
	/* The current user must be registered or not logged in (no user) */
	@typeof-current-user: current_user ∈ registered ∪ {no_user}
	
	event INITIALISATION
	then
		/* REQ 6: The root user is the initial administrator. */
		@act-init-password: password ≔ {root_user ↦ root_password}
		@act-init-registered: registered ≔ {root_user}
		@act-init-role: role ≔ {root_user ↦ Admin}
		@act-init-current-user: current_user ≔ no_user
	end
	
	/* REQ 2: The system should only allow a user to log in to the system using the correct password. */
	event Login
	any
		user
		pass 
	where
		@check-registered: user ∈ registered
		@check-password: password(user) = pass
		@check-not-logged-in: current_user = no_user
	then
		@login: current_user ≔ user
	end
	
	/* REQ 3: A logged-in user can log out of the system. */
	event Logout
		where
			@check-registered: current_user ∈ registered
			@check-logged-in: current_user ≠ no_user
		then
			@log-out: current_user ≔ no_user
	end
	
	/* REQ 9: A logged-in user can change their password. */
	event ChangeUserPassword
		any
			new_pass
		where
			@check-logged-in: current_user ≠ no_user
			@new-pass: new_pass ∈ PASSWORD
			@password-is-different: password(current_user) ≠ new_pass
		then
			@set-password: password(current_user) ≔ new_pass
	end
	
	/* REQ 8: A client can register an account with the system directly. */
	event RegisterClient
		any
			new_user
			new_pass
		where
			@new-user-not-registered: new_user ∈ USER ∧ new_user ∉ registered 
			@new-user-not-null: new_user ≠ no_user
			@is-not-logged-in: current_user = no_user
			@typeof-pass: new_pass ∈ PASSWORD
		then
			@register-user: registered ≔ registered ∪ {new_user}
			@assign-client: role ≔ role ∪ {new_user ↦ Client}
			@set-pass: password(new_user) ≔ new_pass
	end
	
	/* REQ 7: A logged-in administrator can register a new user for the role of administrator or staff. */
	event RegisterAdminOrStaff
		any 
			new_user
			new_role
			new_pass
		where
			@new-user-not-registered: new_user ∈ USER ∧ new_user ∉ registered
			@new-user-not-null: new_user ≠ no_user
			@new-role-admin-or-staff: new_role ∈ {Admin, Staff}
			@typeof-pass: new_pass ∈ PASSWORD
			@is-admin: current_user ↦ Admin ∈ role ∪ {new_user ↦ Admin}
		then
			@register-user: registered ≔ registered ∪ {new_user}
			@assign-role: role ≔ role ∪ {new_user ↦ new_role}
			@set-pass: password(new_user) ≔ new_pass
	end